import type { PullRequest, Issue, Contributor, User } from '../types';

export const createMockUser = (overrides: Partial<User> = {}): User => ({
  login: 'testuser',
  id: 1,
  node_id: 'user_1',
  avatar_url: 'https://avatars.githubusercontent.com/u/1?v=4',
  gravatar_id: null,
  url: 'https://api.github.com/users/testuser',
  html_url: 'https://github.com/testuser',
  followers_url: 'https://api.github.com/users/testuser/followers',
  following_url: 'https://api.github.com/users/testuser/following{/other_user}',
  gists_url: 'https://api.github.com/users/testuser/gists{/gist_id}',
  starred_url: 'https://api.github.com/users/testuser/starred{/owner}{/repo}',
  subscriptions_url: 'https://api.github.com/users/testuser/subscriptions',
  organizations_url: 'https://api.github.com/users/testuser/orgs',
  repos_url: 'https://api.github.com/users/testuser/repos',
  events_url: 'https://api.github.com/users/testuser/events{/privacy}',
  received_events_url: 'https://api.github.com/users/testuser/received_events',
  type: 'User',
  site_admin: false,
  name: null,
  company: null,
  blog: null,
  location: null,
  email: null,
  hireable: null,
  bio: null,
  twitter_username: null,
  public_repos: 0,
  public_gists: 0,
  followers: 0,
  following: 0,
  created_at: '2020-01-01T00:00:00Z',
  updated_at: '2024-01-01T00:00:00Z',
  ...overrides,
});

export const createMockRepo = (overrides: Partial<NonNullable<PullRequest['head']['repo']>> = {}): NonNullable<PullRequest['head']['repo']> => {
  const mockRepo = {
    id: 1,
    node_id: 'repo_1',
    name: 'test-repo',
    full_name: 'test/test-repo',
    license: null,
    forks: 0,
    owner: createMockUser(),
    private: false,
    html_url: 'https://github.com/test/test-repo',
    description: null,
    fork: false,
    url: 'https://api.github.com/repos/test/test-repo',
    created_at: '2020-01-01T00:00:00Z',
    updated_at: '2024-01-01T00:00:00Z',
    pushed_at: '2024-01-01T00:00:00Z',
    clone_url: 'https://github.com/test/test-repo.git',
    svn_url: 'https://github.com/test/test-repo',
    homepage: null,
    size: 100,
    stargazers_count: 0,
    watchers_count: 0,
    language: null,
    has_issues: true,
    has_projects: true,
    has_downloads: true,
    has_wiki: true,
    has_pages: false,
    archived: false,
    disabled: false,
    visibility: 'public' as const,
    default_branch: 'main',
    open_issues_count: 0,
    is_template: false,
    topics: [],
    has_discussions: false,
    allow_forking: true,
    allow_squash_merge: true,
    allow_merge_commit: true,
    allow_rebase_merge: true,
    allow_auto_merge: false,
    delete_branch_on_merge: false,
    allow_update_branch: false,
    use_squash_pr_title_as_default: false,
    squash_merge_commit_message: 'COMMIT_MESSAGES' as const,
    squash_merge_commit_title: 'COMMIT_OR_PR_TITLE' as const,
    merge_commit_message: 'PR_TITLE' as const,
    merge_commit_title: 'MERGE_MESSAGE' as const,
    web_commit_signoff_required: false,
    permissions: {
      admin: false,
      maintain: false,
      push: false,
      triage: false,
      pull: true,
    },
    ...overrides,
  };
  return mockRepo as NonNullable<PullRequest['head']['repo']>;
};

export const createMockPR = (overrides: Partial<PullRequest> = {}): PullRequest => ({
  id: 1,
  node_id: 'PR_1',
  url: 'https://api.github.com/repos/test/repo/pulls/1',
  html_url: 'https://github.com/test/repo/pull/1',
  diff_url: 'https://github.com/test/repo/pull/1.diff',
  patch_url: 'https://github.com/test/repo/pull/1.patch',
  issue_url: 'https://api.github.com/repos/test/repo/issues/1',
  number: 1,
  state: 'closed',
  locked: false,
  title: 'Test PR',
  user: createMockUser(),
  body: 'Test PR body',
  created_at: '2024-01-01T00:00:00Z',
  updated_at: '2024-01-01T00:00:00Z',
  closed_at: '2024-01-01T12:00:00Z',
  merged_at: '2024-01-01T12:00:00Z',
  merge_commit_sha: 'abc123',
  assignee: null,
  assignees: [],
  requested_reviewers: [],
  requested_teams: [],
  labels: [],
  milestone: null,
  draft: false,
  commits_url: 'https://api.github.com/repos/test/repo/pulls/1/commits',
  review_comments_url: 'https://api.github.com/repos/test/repo/pulls/1/comments',
  review_comment_url: 'https://api.github.com/repos/test/repo/pulls/{number}/comments/{id}',
  comments_url: 'https://api.github.com/repos/test/repo/issues/1/comments',
  head: {
    label: 'test:feature',
    ref: 'feature',
    sha: 'def456',
    user: createMockUser(),
    repo: createMockRepo(),
  },
  base: {
    label: 'main',
    ref: 'main',
    sha: 'ghi789',
    user: createMockUser(),
    repo: createMockRepo(),
  },
  _links: {
    self: { href: 'https://api.github.com/repos/test/repo/pulls/1' },
    html: { href: 'https://github.com/test/repo/pull/1' },
    issue: { href: 'https://api.github.com/repos/test/repo/issues/1' },
    comments: { href: 'https://api.github.com/repos/test/repo/issues/1/comments' },
    review_comments: { href: 'https://api.github.com/repos/test/repo/pulls/1/comments' },
    review_comment: { href: 'https://api.github.com/repos/test/repo/pulls/comments/{number}' },
    commits: { href: 'https://api.github.com/repos/test/repo/pulls/1/commits' },
    statuses: { href: 'https://api.github.com/repos/test/repo/statuses/def456' },
  },
  author_association: 'CONTRIBUTOR',
  auto_merge: null,
  active_lock_reason: null,
  ...overrides,
} as PullRequest);

export const createMockIssue = (overrides: Partial<Issue> = {}): Issue => ({
  id: 1,
  node_id: 'issue_1',
  url: 'https://api.github.com/repos/test/repo/issues/1',
  repository_url: 'https://api.github.com/repos/test/repo',
  labels_url: 'https://api.github.com/repos/test/repo/issues/1/labels{/name}',
  comments_url: 'https://api.github.com/repos/test/repo/issues/1/comments',
  events_url: 'https://api.github.com/repos/test/repo/issues/1/events',
  html_url: 'https://github.com/test/repo/issues/1',
  number: 1,
  state: 'open',
  title: 'Test Issue',
  user: createMockUser(),
  labels: [],
  assignee: null,
  assignees: [],
  milestone: null,
  comments: 0,
  created_at: '2024-01-01T00:00:00Z',
  updated_at: '2024-01-01T00:00:00Z',
  closed_at: null,
  author_association: 'CONTRIBUTOR',
  active_lock_reason: null,
  body: 'Test issue body',
  pull_request: undefined,
  timeline_url: 'https://api.github.com/repos/test/repo/issues/1/timeline',
  state_reason: null,
  locked: false,
  ...overrides,
} as Issue);

export const createMockContributor = (overrides: Partial<Contributor> = {}): Contributor => ({
  login: 'testuser',
  id: 1,
  node_id: 'contrib_1',
  avatar_url: 'https://github.com/images/error/testuser_happy.gif',
  gravatar_id: '',
  url: 'https://api.github.com/users/testuser',
  html_url: 'https://github.com/testuser',
  followers_url: 'https://api.github.com/users/testuser/followers',
  following_url: 'https://api.github.com/users/testuser/following{/other_user}',
  gists_url: 'https://api.github.com/users/testuser/gists{/gist_id}',
  starred_url: 'https://api.github.com/users/testuser/starred{/owner}{/repo}',
  subscriptions_url: 'https://api.github.com/users/testuser/subscriptions',
  organizations_url: 'https://api.github.com/users/testuser/orgs',
  repos_url: 'https://api.github.com/users/testuser/repos',
  events_url: 'https://api.github.com/users/testuser/events{/privacy}',
  received_events_url: 'https://api.github.com/users/testuser/received_events',
  type: 'User',
  site_admin: false,
  contributions: 10,
  ...overrides,
} as Contributor);
